// <auto-generated />
using System;
using AirportAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirportApi.Migrations
{
    [DbContext(typeof(AirportContext))]
    [Migration("20240725165236_AddFlightLog")]
    partial class AddFlightLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AirportAPI.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<int?>("LegId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<int?>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.ToTable("Flights", (string)null);
                });

            modelBuilder.Entity("AirportAPI.Models.FlightLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("In")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Out")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("LegId");

                    b.ToTable("FlightLogs", (string)null);
                });

            modelBuilder.Entity("AirportAPI.Models.Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CrossingTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Legs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1,
                            CrossingTime = 60,
                            Name = "Point 1",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1,
                            CrossingTime = 60,
                            Name = "Point 2",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 1,
                            CrossingTime = 60,
                            Name = "Point 3",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 1,
                            CrossingTime = 60,
                            Name = "Point 4",
                            Type = 33
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 1,
                            CrossingTime = 180,
                            Name = "Point 5",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 1,
                            CrossingTime = 0,
                            Name = "Point 6",
                            Type = 26
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 1,
                            CrossingTime = 0,
                            Name = "Point 7",
                            Type = 26
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 1,
                            CrossingTime = 180,
                            Name = "Point 8",
                            Type = 16
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 1,
                            CrossingTime = 60,
                            Name = "Point 9",
                            Type = 32
                        });
                });

            modelBuilder.Entity("AirportAPI.Models.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Processes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Landing Process"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Departure Process"
                        });
                });

            modelBuilder.Entity("AirportAPI.Models.ProcessLeg", b =>
                {
                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ProcessId", "LegId");

                    b.HasIndex("LegId");

                    b.ToTable("ProcessLegs", (string)null);

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            LegId = 1,
                            Order = 1
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 2,
                            Order = 2
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 3,
                            Order = 3
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 4,
                            Order = 4
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 5,
                            Order = 5
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 6,
                            Order = 6
                        },
                        new
                        {
                            ProcessId = 1,
                            LegId = 7,
                            Order = 7
                        },
                        new
                        {
                            ProcessId = 2,
                            LegId = 6,
                            Order = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            LegId = 7,
                            Order = 2
                        },
                        new
                        {
                            ProcessId = 2,
                            LegId = 8,
                            Order = 3
                        },
                        new
                        {
                            ProcessId = 2,
                            LegId = 4,
                            Order = 4
                        },
                        new
                        {
                            ProcessId = 2,
                            LegId = 9,
                            Order = 5
                        });
                });

            modelBuilder.Entity("AirportAPI.Models.Flight", b =>
                {
                    b.HasOne("AirportAPI.Models.Leg", "CurrentLeg")
                        .WithMany("CurrectFlights")
                        .HasForeignKey("LegId");

                    b.Navigation("CurrentLeg");
                });

            modelBuilder.Entity("AirportAPI.Models.FlightLog", b =>
                {
                    b.HasOne("AirportAPI.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportAPI.Models.Leg", "Leg")
                        .WithMany()
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("AirportAPI.Models.ProcessLeg", b =>
                {
                    b.HasOne("AirportAPI.Models.Leg", "Leg")
                        .WithMany("ProcessLegs")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportAPI.Models.Process", "Process")
                        .WithMany("ProcessLegs")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AirportAPI.Models.Leg", b =>
                {
                    b.Navigation("CurrectFlights");

                    b.Navigation("ProcessLegs");
                });

            modelBuilder.Entity("AirportAPI.Models.Process", b =>
                {
                    b.Navigation("ProcessLegs");
                });
#pragma warning restore 612, 618
        }
    }
}
